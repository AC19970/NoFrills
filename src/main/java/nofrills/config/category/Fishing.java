package nofrills.config.category;

import dev.isxander.yacl3.api.ConfigCategory;
import dev.isxander.yacl3.api.LabelOption;
import dev.isxander.yacl3.api.Option;
import dev.isxander.yacl3.api.OptionDescription;
import dev.isxander.yacl3.api.controller.StringControllerBuilder;
import net.minecraft.text.Text;
import nofrills.config.Config;

public class Fishing {
    public static ConfigCategory create(Config defaults, Config config) {
        return ConfigCategory.createBuilder()
                .name(Text.of("Fishing"))

                .option(LabelOption.create(Text.of("Sea Creature Cap")))
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Track Cap"))
                        .description(OptionDescription.of(Text.of("Tracks how many sea creatures are currently alive within render distance.")))
                        .binding(false, () -> Config.capEnabled, value -> Config.capEnabled = value)
                        .controller(Config::booleanController)
                        .build())
                .option(Option.<Integer>createBuilder()
                        .name(Text.of("Cap Target"))
                        .description(OptionDescription.of(Text.of("The minimum amount of alive sea creatures to consider that you've reached the cap.")))
                        .binding(50, () -> Config.capTarget, value -> Config.capTarget = value)
                        .controller(option -> Config.intSliderController(option, 1, 60, 1))
                        .build())
                .option(Option.<Integer>createBuilder()
                        .name(Text.of("Kill Delay"))
                        .description(OptionDescription.of(Text.of("The amount of time (in seconds) until the cap can be tracked again (once reached), to give you time to kill your sea creatures.")))
                        .binding(30, () -> Config.capDelay, value -> Config.capDelay = value)
                        .controller(option -> Config.intSliderController(option, 0, 120, 1))
                        .build())
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Render Cap"))
                        .description(OptionDescription.of(Text.of("Shows the current amount of alive sea creatures as a small number on screen while you hold your fishing rod.")))
                        .binding(false, () -> Config.capRender, value -> Config.capRender = value)
                        .controller(Config::booleanController)
                        .build())
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Send Message"))
                        .description(OptionDescription.of(Text.of("Send a message in chat to inform your fishing party that you've reached the sea creature cap.\n\nNote: This option is might be useless in islands where everyone has their own cap, such as the Crimson Isle and Crystal Hollows.")))
                        .binding(false, () -> Config.capSendMsg, value -> Config.capSendMsg = value)
                        .controller(Config::booleanController)
                        .build())
                .option(Option.<String>createBuilder()
                        .name(Text.of("Message to Send"))
                        .description(OptionDescription.of(Text.of("The message to send once the cap is reached.")))
                        .binding("/pc SEA CREATURE CAP REACHED!", () -> Config.capMsg, value -> Config.capMsg = value)
                        .controller(StringControllerBuilder::create)
                        .build())
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Play Sound"))
                        .description(OptionDescription.of(Text.of("Plays a Trident sound effect once the cap is reached.")))
                        .binding(false, () -> Config.capSound, value -> Config.capSound = value)
                        .controller(Config::booleanController)
                        .build())
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Show Title"))
                        .description(OptionDescription.of(Text.of("Show a title on screen once the cap is reached.")))
                        .binding(false, () -> Config.capTitle, value -> Config.capTitle = value)
                        .controller(Config::booleanController)
                        .build())

                .option(LabelOption.create(Text.of("Rare Sea Creatures")))
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Show Title"))
                        .description(OptionDescription.of(Text.of("Show a title on screen when you catch any rare/profitable sea creature.\n\nRequires \"Sea Creature Chat\" to be enabled in the Skyblock settings.")))
                        .binding(false, () -> Config.rareTitle, value -> Config.rareTitle = value)
                        .controller(Config::booleanController)
                        .build())
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Apply Glow"))
                        .description(OptionDescription.of(Text.of("Applies a gold-colored glow to any rare sea creature.")))
                        .binding(false, () -> Config.rareGlow, value -> Config.rareGlow = value)
                        .controller(Config::booleanController)
                        .build())
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Send Message"))
                        .description(OptionDescription.of(Text.of("Send a message in chat when you catch a rare/profitable sea creature. \n\nRequires \"Sea Creature Chat\" to be enabled in the Skyblock settings.")))
                        .binding(false, () -> Config.rareSendMsg, value -> Config.rareSendMsg = value)
                        .controller(Config::booleanController)
                        .build())
                .option(Option.<String>createBuilder()
                        .name(Text.of("Message to Send"))
                        .description(OptionDescription.of(Text.of("The message to send when you catch a rare/profitable sea creature.\n\nReplaces {spawnmsg} with the sea creature's spawn message, e.g. \"What is this creature!?\".\nReplaces {name} with the sea creature's name, e.g. \"Yeti\".")))
                        .binding("/pc {spawnmsg}", () -> Config.rareMsg, value -> Config.rareMsg = value)
                        .controller(StringControllerBuilder::create)
                        .build())
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Play Sound"))
                        .description(OptionDescription.of(Text.of("Play a sound when you catch any rare/profitable sea creature.\n\nRequires \"Sea Creature Chat\" to be enabled in the Skyblock settings.")))
                        .binding(false, () -> Config.rareSound, value -> Config.rareSound = value)
                        .controller(Config::booleanController)
                        .build())
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Swap Message"))
                        .description(OptionDescription.of(Text.of("Replaces the spawn messages of rare/profitable sea creatures with colored versions, making them easier to see.\n\nRequires \"Sea Creature Chat\" to be enabled in the Skyblock settings.")))
                        .binding(false, () -> Config.rareReplace, value -> Config.rareReplace = value)
                        .controller(Config::booleanController)
                        .build())

                .option(LabelOption.create(Text.of("Other")))
                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Mute Drake"))
                        .description(OptionDescription.of(Text.of("Prevents the Reindrake from blowing up your ears when picking up the gifts you've dropped.")))
                        .binding(false, () -> Config.muteDrake, value -> Config.muteDrake = value)
                        .controller(Config::booleanController)
                        .build())

                .build();
    }
}