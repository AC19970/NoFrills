package nofrills.config.category;

import dev.isxander.yacl3.api.ConfigCategory;
import dev.isxander.yacl3.api.Option;
import dev.isxander.yacl3.api.OptionDescription;
import dev.isxander.yacl3.api.OptionGroup;
import dev.isxander.yacl3.api.controller.StringControllerBuilder;
import net.minecraft.text.Text;
import nofrills.config.Config;

public class Fishing {
    public static ConfigCategory create(Config defaults, Config config) {
        return ConfigCategory.createBuilder()
                .name(Text.of("Fishing"))

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Sea Creature Cap"))
                        .collapsed(true)
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Track Cap"))
                                .description(OptionDescription.of(Text.of("Main toggle for if the sea creature cap should be tracked.")))
                                .binding(false, () -> Config.fishCapEnabled, value -> Config.fishCapEnabled = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Integer>createBuilder()
                                .name(Text.of("Cap Target"))
                                .description(OptionDescription.of(Text.of("The minimum amount of sea creatures within render distance for the mod to consider that you've reached the cap.")))
                                .binding(50, () -> Config.fishCap, value -> Config.fishCap = value)
                                .controller(option -> Config.intSliderController(option, 1, 60, 1))
                                .build())
                        .option(Option.<Integer>createBuilder()
                                .name(Text.of("Kill Delay"))
                                .description(OptionDescription.of(Text.of("The amount of time (in seconds) to pause tracking the cap for, once it is reached, to prevent the mod from accidentally alerting you multiple times.")))
                                .binding(30, () -> Config.fishCapDelay, value -> Config.fishCapDelay = value)
                                .controller(option -> Config.intSliderController(option, 0, 120, 1))
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Send Message"))
                                .description(OptionDescription.of(Text.of("Send a message in chat to inform your fishing party that you've reached the sea creature cap.\n\nNote: This option is generally useless for islands where everyone has their own cap, such as the Crimson Isle and Crystal Hollows.")))
                                .binding(false, () -> Config.fishCapSendMsg, value -> Config.fishCapSendMsg = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<String>createBuilder()
                                .name(Text.of("Message to Send"))
                                .description(OptionDescription.of(Text.of("The message to send once the cap is reached.")))
                                .binding("/pc SEA CREATURE CAP REACHED!", () -> Config.fishCapMsg, value -> Config.fishCapMsg = value)
                                .controller(StringControllerBuilder::create)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Play Sound"))
                                .description(OptionDescription.of(Text.of("Play an anvil sound once the cap is reached.")))
                                .binding(false, () -> Config.fishCapSound, value -> Config.fishCapSound = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Show Title"))
                                .description(OptionDescription.of(Text.of("Show a title on screen once the cap is reached.")))
                                .binding(false, () -> Config.fishCapTitle, value -> Config.fishCapTitle = value)
                                .controller(Config::booleanController)
                                .build())
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Rare Sea Creatures"))
                        .collapsed(true)
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Show Title"))
                                .description(OptionDescription.of(Text.of("Show a title on screen when you catch any rare/profitable sea creature.\n\nRequires \"Sea Creature Chat\" to be enabled in the Skyblock settings.")))
                                .binding(false, () -> Config.fishRareTitle, value -> Config.fishRareTitle = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Send Message"))
                                .description(OptionDescription.of(Text.of("Send a message in chat when you catch a rare/profitable sea creature. \n\nRequires \"Sea Creature Chat\" to be enabled in the Skyblock settings.")))
                                .binding(false, () -> Config.fishRareMsgSend, value -> Config.fishRareMsgSend = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<String>createBuilder()
                                .name(Text.of("Message to Send"))
                                .description(OptionDescription.of(Text.of("The message to send when you catch a rare/profitable sea creature.\n\nReplaces {spawnmsg} with the sea creature's spawn message, e.g. \"What is this creature!?\".\nReplaces {name} with the sea creature's name, e.g. \"Yeti\".")))
                                .binding("/pc {spawnmsg}", () -> Config.fishRareMsg, value -> Config.fishRareMsg = value)
                                .controller(StringControllerBuilder::create)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Play Sound"))
                                .description(OptionDescription.of(Text.of("Play a ping sound when you catch any rare/profitable sea creature.\n\nRequires \"Sea Creature Chat\" to be enabled in the Skyblock settings.")))
                                .binding(false, () -> Config.fishRareSound, value -> Config.fishRareSound = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Swap Message"))
                                .description(OptionDescription.of(Text.of("Replaces the spawn messages of rare/profitable sea creatures with colored versions, making them easier to see.\n\nRequires \"Sea Creature Chat\" to be enabled in the Skyblock settings.")))
                                .binding(false, () -> Config.fishRareReplace, value -> Config.fishRareReplace = value)
                                .controller(Config::booleanController)
                                .build())
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Other"))
                        .collapsed(true)
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Mute Drake"))
                                .description(OptionDescription.of(Text.of("Prevents the Reindrake sea creature from blowing up your ears as you pick up the gifts you've dropped.")))
                                .binding(false, () -> Config.fishMuteDrake, value -> Config.fishMuteDrake = value)
                                .controller(Config::booleanController)
                                .build())
                        .build())

                .build();
    }
}